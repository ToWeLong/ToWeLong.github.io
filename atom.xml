<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://towelong.cn</id>
    <title>WeLong&apos;闲言碎语</title>
    <updated>2019-10-26T14:57:13.744Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://towelong.cn"/>
    <link rel="self" href="https://towelong.cn/atom.xml"/>
    <subtitle>学的不多，用心就好！</subtitle>
    <logo>https://towelong.cn/images/avatar.png</logo>
    <icon>https://towelong.cn/favicon.ico</icon>
    <rights>All rights reserved 2019, WeLong&apos;闲言碎语</rights>
    <entry>
        <title type="html"><![CDATA[使用SpringBoot重构旧岛小样服务端]]></title>
        <id>https://towelong.cn/post/springboot-island</id>
        <link href="https://towelong.cn/post/springboot-island">
        </link>
        <updated>2019-10-26T14:52:01.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>之前在慕课网买了一门<code>koa</code>的实战课<a href="https://coding.imooc.com/class/342.html">旧岛小样服务端</a>，学完了有一段时间了，然后现在在学<code>java</code>版的<code>springboot</code>框架然后就试着重构下。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>之前在慕课网买了一门<code>koa</code>的实战课<a href="https://coding.imooc.com/class/342.html">旧岛小样服务端</a>，学完了有一段时间了，然后现在在学<code>java</code>版的<code>springboot</code>框架然后就试着重构下。</p>
</blockquote>
<!-- more -->
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4346479"><label class="task-list-item-label" for="task-item-4346479"> 期刊</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5767256"> <a href="http://bl.7yue.pro/dev/classic.html#id2">获取最新一期<label class="task-list-item-label" for="task-item-5767256"> [获取最新一期](http://bl.7yue.pro/dev/classic.html#id2)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7170250"> <a href="http://bl.7yue.pro/dev/classic.html#id3">获取当前一期的下一期<label class="task-list-item-label" for="task-item-7170250"> [获取当前一期的下一期](http://bl.7yue.pro/dev/classic.html#id3)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4309734"> <a href="http://bl.7yue.pro/dev/classic.html#id4">获取某一期详细信息<label class="task-list-item-label" for="task-item-4309734"> [获取某一期详细信息](http://bl.7yue.pro/dev/classic.html#id4)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6538655"> <a href="http://bl.7yue.pro/dev/classic.html#id5">获取当前一期的上一期<label class="task-list-item-label" for="task-item-6538655"> [获取当前一期的上一期](http://bl.7yue.pro/dev/classic.html#id5)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5834935"> <a href="http://bl.7yue.pro/dev/classic.html#id6">获取点赞信息<label class="task-list-item-label" for="task-item-5834935"> [获取点赞信息](http://bl.7yue.pro/dev/classic.html#id6)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4339632"> <a href="http://bl.7yue.pro/dev/classic.html#id7">获取我喜欢的期刊<label class="task-list-item-label" for="task-item-4339632"> [获取我喜欢的期刊](http://bl.7yue.pro/dev/classic.html#id7)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2237906"><label class="task-list-item-label" for="task-item-2237906"> 书籍</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4992450"> <a href="http://bl.7yue.pro/dev/book.html#id2">获取热门书籍(概要)<label class="task-list-item-label" for="task-item-4992450"> [获取热门书籍(概要)](http://bl.7yue.pro/dev/book.html#id2)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3532282"> <a href="http://bl.7yue.pro/dev/book.html#id3">获取书籍短评<label class="task-list-item-label" for="task-item-3532282"> [获取书籍短评](http://bl.7yue.pro/dev/book.html#id3)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5384223"> <a href="http://bl.7yue.pro/dev/book.html#id4">获取喜欢书籍数量<label class="task-list-item-label" for="task-item-5384223"> [获取喜欢书籍数量](http://bl.7yue.pro/dev/book.html#id4)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8359402"> <a href="http://bl.7yue.pro/dev/book.html#id5">获取书籍点赞情况<label class="task-list-item-label" for="task-item-8359402"> [获取书籍点赞情况](http://bl.7yue.pro/dev/book.html#id5)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4146590"> <a href="http://bl.7yue.pro/dev/book.html#id6">新增短评<label class="task-list-item-label" for="task-item-4146590"> [新增短评](http://bl.7yue.pro/dev/book.html#id6)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-333"> <a href="http://bl.7yue.pro/dev/book.html#id7">获取热搜关键字<label class="task-list-item-label" for="task-item-333"> [获取热搜关键字](http://bl.7yue.pro/dev/book.html#id7)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-47848"> <a href="http://bl.7yue.pro/dev/book.html#id8">书籍搜索<label class="task-list-item-label" for="task-item-47848"> [书籍搜索](http://bl.7yue.pro/dev/book.html#id8)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2321262"> <a href="http://bl.7yue.pro/dev/book.html#id9">获取书籍详细信息<label class="task-list-item-label" for="task-item-2321262"> [获取书籍详细信息](http://bl.7yue.pro/dev/book.html#id9)</label></li>
</ul>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3051505"><label class="task-list-item-label" for="task-item-3051505"> 点赞</label>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7392250"> <a href="http://bl.7yue.pro/dev/like.html#id2">进行点赞<label class="task-list-item-label" for="task-item-7392250"> [进行点赞](http://bl.7yue.pro/dev/like.html#id2)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2875158"> <a href="http://bl.7yue.pro/dev/like.html#id3">取消点赞<label class="task-list-item-label" for="task-item-2875158"> [取消点赞](http://bl.7yue.pro/dev/like.html#id3)</label></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot整合MyBatis-Plus]]></title>
        <id>https://towelong.cn/post/springboot-mybatis-plus</id>
        <link href="https://towelong.cn/post/springboot-mybatis-plus">
        </link>
        <updated>2019-10-25T09:02:14.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p><code>MyBatis-Plus</code>是国人开发的一个<code>ORM</code>框架，方便开发人员不用写<code>SQL</code>语句完成一些简单的数据库操作。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p><code>MyBatis-Plus</code>是国人开发的一个<code>ORM</code>框架，方便开发人员不用写<code>SQL</code>语句完成一些简单的数据库操作。</p>
</blockquote>
<!-- more -->
<p>之前在学习<code>springboot</code>的时候，我操作数据库用的是<a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/">Spring Data JPA</a>这个是<code>spring</code>官方的一个<code>ORM</code>框架，直白的说，为什么不用<code>JPA</code>的原因，就是英语不好，对于官方的文档看不懂，然后我就选择了<code>MyBatis-Plus</code>。</p>
<h3 id="使用maven进行安装">使用maven进行安装：</h3>
<pre><code class="language-java">        &lt;!--mybatis Plus--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;3.2.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--mysql--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;mysql&lt;/groupId&gt;
            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre>
<p>这是所需要的依赖库。</p>
<h3 id="配置applicationyml">配置application.yml</h3>
<pre><code class="language-java">spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/island-java?useSSL=false&amp;serverTimezone=GMT%2B8
    username: root
    password: password
</code></pre>
<p>至此，基础配置已经完成了。</p>
<p>创建一个Mapper接口：</p>
<pre><code class="language-java">public interface UserMapper extends BaseMapper&lt;UserModel&gt; {
    
}
</code></pre>
<p>再创建一个User模型：</p>
<pre><code class="language-java">@Data
@TableName(value = &quot;user&quot;)
public class UserModel {
    @TableId(value = &quot;id&quot;,type = IdType.AUTO)
    private Long id;
    private String nickname;
    private String email;
    private String password;
    private String openid;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private LocalDateTime deletedAt;
}
</code></pre>
<p>然后在启动类上添加<code>@MapperScan</code></p>
<pre><code class="language-java">@SpringBootApplication
@MapperScan(&quot;com.example.demo.Dao&quot;)  // UserMapper所在包
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

}

</code></pre>
<p>这样就可以使用<code>MyBatis-Plus</code>了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot解决跨域问题]]></title>
        <id>https://towelong.cn/post/springboot-cors</id>
        <link href="https://towelong.cn/post/springboot-cors">
        </link>
        <updated>2019-10-24T05:06:13.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="什么是跨域">什么是跨域？</h2>
<p>定义：浏览器从一个域名的网页取请求另一个域名下的东西。通俗点说，浏览器直接从A域访问B域中的资源是不被允许的，如果想要访问，就需要进行一步操作，这操作就叫“跨域”。例如，你从百度的页面，点击一个按钮，请求了新浪的一个接口，这就进行了跨域。不单单只有域名不同就是跨域，域名、端口、协议其一不同就是不同的域，请求资源需要跨域。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="什么是跨域">什么是跨域？</h2>
<p>定义：浏览器从一个域名的网页取请求另一个域名下的东西。通俗点说，浏览器直接从A域访问B域中的资源是不被允许的，如果想要访问，就需要进行一步操作，这操作就叫“跨域”。例如，你从百度的页面，点击一个按钮，请求了新浪的一个接口，这就进行了跨域。不单单只有域名不同就是跨域，域名、端口、协议其一不同就是不同的域，请求资源需要跨域。</p>
<!-- more -->
<h2 id="为什么要跨域">为什么要跨域？</h2>
<p>为什么需要跨域，而不直接访问其他域下的资源呢？这是浏览器的限制，专业点说叫浏览器同源策略限制。主要是为了安全考虑。现在的安全框架，一般请求的时候header中不是都存个token嘛，你要是用这个token去正常访问A域下的东西是没问题的，然后又去访问了B域，结果阴差阳错的还带着这个token，那么B域，或者说B网站是不是就可以拿着你的token去A域下做点什么呢，这就相当危险了。所以浏览器加上了所谓的浏览器同源策略限制。但是为了我们真的需要从A域下访问B的资源（正常访问），就需要用到跨域，跨越这个限制了。</p>
<h2 id="springboot解决跨域问题">SpringBoot解决跨域问题</h2>
<blockquote>
<p><code>SpringBoot</code>可以基于<code>Cors</code>解决跨域问题，<code>Cors</code>是一种机制，告诉我们的后台，哪边（<code>origin</code>）来的请求可以访问服务器的数据。</p>
</blockquote>
<h3 id="全局配置跨域">全局配置跨域</h3>
<pre><code class="language-java">@Configuration
public class GlobalCors implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping(&quot;/**&quot;) // 添加跨域路由路径
            .allowedOrigins(&quot;*&quot;) // 放行哪些原始域
            .allowCredentials(true) // 是否发送Cookie信息
            .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;) // 放行哪些原始域(请求方式)
            .maxAge(3600);
    }
}
</code></pre>
<h3 id="局部配置跨域">局部配置跨域</h3>
<ul>
<li>在方法上（<code>@RequestMapping</code>）使用注解 <code>@CrossOrigin</code>：</li>
</ul>
<pre><code class="language-java"> 	@RestController
	@GetMapping(&quot;/hello&quot;)
    @CrossOrigin(&quot;http://localhost:8080&quot;) 
    public String index( ){
        return &quot;Hello World&quot;;
    }
</code></pre>
<ul>
<li>在控制器（<code>@Controller</code>）上使用注解 <code>@CrossOrigin</code> ：</li>
</ul>
<pre><code class="language-java">@RestController
@CrossOrigin(origins = &quot;http://localhost:8080&quot;, maxAge = 3600)
public class HelloController {
   @GetMapping(&quot;/hello&quot;)
   public String index( ){
        return &quot;Hello World&quot;;
    }
}
</code></pre>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/68901046">跨域问题与SpringBoot解决方案</a></li>
<li><a href="https://www.jianshu.com/p/477e7eaa6c2f">SpringBoot 实现前后端分离的跨域访问（CORS）</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot全局异常处理与自定义异常处理]]></title>
        <id>https://towelong.cn/post/springboot-exception</id>
        <link href="https://towelong.cn/post/springboot-exception">
        </link>
        <updated>2019-10-23T05:55:43.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>下层基础决定上层建筑，所以我今天研究了一波异常处理机制。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>下层基础决定上层建筑，所以我今天研究了一波异常处理机制。</p>
</blockquote>
<!-- more -->
<h2 id="为什么要研究下层基础呢">为什么要研究“下层基础”呢？</h2>
<p>首先，当只有把基础设施给建设完全我们才能快速进行开发，因为<code>SpringBoot</code>相对于<code>Spring</code>而言，已经提高了我们的开发效率，我们只需要在此基础上再完善，最终才能帮助我们快速开发。</p>
<p>话不多说，接下来讲讲我研究的一种思路。</p>
<h3 id="全局异常处理">全局异常处理</h3>
<p>我们首先在<code>SpringBoot</code>工程下创建一个名为<code>exception</code>的包，然后在包下面新建一个类叫<code>GlobalException</code> ,我们利用<code>@ControllerAdvice</code>注解来捕获异常。</p>
<pre><code class="language-java">public class GlobalException {
    @ResponseBody
    @ExceptionHandler(value = Exception.class)
    public Map getSysError(Exception e) {
        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();
        map.put(&quot;code&quot;, -1);
        map.put(&quot;msg&quot;, e.getMessage());
        map.put(&quot;request&quot;,RequestHelper.getRequestUrl());
        return map;
    }
}    
</code></pre>
<p><code>getSysError</code> 方法就是捕获系统出现的异常的一个方法，然后<code>RequestHelper</code>是我封装的一个获取请求方法和请求<code>URL</code>的类。具体实现如下：</p>
<pre><code class="language-java">public class RequestHelper {

    public static HttpServletRequest getRequest() {
        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        return request;
    }
    public static String getRequestUrl() {
        String methods = getRequest().getMethod();
        return methods+&quot; &quot;+getRequest().getServletPath();
    }
}
</code></pre>
<p>然后，根据全局异常处理看看捕获到的异常结果是怎么样的，我们利用 <code>1/0</code>这个大家都很熟悉的一个异常作为例子。</p>
<pre><code class="language-java">@RestController
public class HelloController {
    @GetMapping(&quot;/hello&quot;)
    public int hello() {
        return 1 / 0;
    }
}
</code></pre>
<p>返回结果如下：</p>
<pre><code class="language-json">{
&quot;msg&quot;: &quot;/ by zero&quot;,
&quot;request&quot;: &quot;GET /hello&quot;,
&quot;code&quot;: -1
}
</code></pre>
<p>但是需要注意的一点是，在部署上线项目的时候，我们不能直接去返回具体的系统错误信息，因此，在生产环境中，我们需要修改为<code>“msg”:&quot;服务器开小差了&quot;</code>，类似于这种模糊的错误信息。</p>
<h3 id="自定义异常处理">自定义异常处理</h3>
<p>新建一个<code>HttpException</code>的自定义异常基础类，</p>
<pre><code class="language-java">@Data
public class HttpException extends RuntimeException {
    private String msg;
    private int code;
    private String url = RequestHelper.getRequestUrl();
}
</code></pre>
<p>之后所有的自定义异常类都去继承<code>HttpException</code>，然后还有很重要的一点是为什么<code>HttpException</code>不去继承<code>Exception</code>这个类，而去继承<code>RuntimeException</code>这个类呢？原因请看<br>
<a href="https://www.zhihu.com/question/51970444">Java自定义异常，应该继承Exception还是Runtime Exception，为什么？</a></p>
<p>然后在此示例中，我创建了一个<code>NotFound</code>类。</p>
<pre><code class="language-java">@Data
public class NotFound extends HttpException {

    private String msg = &quot;资源不存在&quot;;
    private int code = 999;

    public NotFound(String msg) {
        this.msg = msg;
    }
    public NotFound() {

    }
}
</code></pre>
<p>然后在<code>GlobalExceptin</code> 中添加以下代码：</p>
<pre><code class="language-java">@ControllerAdvice
public class GlobalException {
    // 系统异常捕获
    @ResponseBody
    @ExceptionHandler(value = Exception.class)
    public Map getSysError(Exception e) {
        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();
        map.put(&quot;code&quot;, -1);
        map.put(&quot;msg&quot;, e.getMessage());
        map.put(&quot;request&quot;,RequestHelper.getRequestUrl());
        return map;
    }
	// 自定义异常捕获
    @ResponseBody
    @ExceptionHandler(value = HttpException.class)
    public Map errorHandler(HttpException ex) {
        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();
        map.put(&quot;code&quot;, ex.getCode());
        map.put(&quot;msg&quot;, ex.getMsg());
        map.put(&quot;request&quot;,ex.getRequest());
        return map;
    }
}
</code></pre>
<p>我们在<code>@ExceptionHandler(value = HttpException.class)</code>中还是捕获了 <code>HttpException</code>这个类，这就是为什么之前 我们所有的自定义异常类全部继承<code>HttpException</code>这个基类的原因之一了。</p>
<p>然后我们再来测试下<code>NotFound</code>这个异常。</p>
<pre><code class="language-java">@RestController
public class HelloController {
    @GetMapping(&quot;/hello&quot;)
    public int hello() {
        throw new NotFound();
    }
}    
</code></pre>
<p>结果如下：</p>
<pre><code class="language-json">{
&quot;msg&quot;: &quot;资源不存在&quot;,
&quot;request&quot;: &quot;GET /hello&quot;,
&quot;code&quot;: 999
}

</code></pre>
<p>至此，异常处理就已经完成了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot盐与密码加密]]></title>
        <id>https://towelong.cn/post/springboot-yan-yu-mi-ma-jia-mi</id>
        <link href="https://towelong.cn/post/springboot-yan-yu-mi-ma-jia-mi">
        </link>
        <updated>2019-10-22T10:24:01.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>在学习<code>SpringBoot</code>的过程中，碰到了用户密码加密的问题，因为密码是不能以明文储存的，这是对用户负责</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>在学习<code>SpringBoot</code>的过程中，碰到了用户密码加密的问题，因为密码是不能以明文储存的，这是对用户负责</p>
</blockquote>
<!-- more -->
<h2 id="首先">首先</h2>
<p>​        我在百度和谷歌找了好多种解决方案，但是答案基本上千篇一律，都是一样的，而且只有部分才能解决问题，然后多亏<code>LinCMS</code>开源团队找到了我想要的解决方案，此前在查资料的过程中，找到的一种解决方案中，有一种可以解决，就是<code>Spring security</code>中的<code>BCryptPasswordEncoder</code>方法对密码进行加密，我测试了一下确实可以，而且和我预想中的一模一样，就是同一个密码在加密的时候每次得到的加密字符串都是不一样的，但是唯一一点让我很无奈的是，用<code>Spring security</code>会捆绑一系列的配置，况且我也没用到它，所以这个方案直接被我Pass掉了。</p>
<h2 id="其次">其次</h2>
<p>​      我再说第二种解决方案，使用<code>jhash</code>、<code>jotp</code></p>
<table>
<thead>
<tr>
<th style="text-align:left">依赖</th>
<th style="text-align:left">Github地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">jhash</td>
<td style="text-align:left">https://github.com/amdelamar/jhash</td>
</tr>
<tr>
<td style="text-align:left">jotp</td>
<td style="text-align:left">https://github.com/amdelamar/jotp</td>
</tr>
</tbody>
</table>
<pre><code class="language-java">    @Test
    public void test() throws InvalidHashException {
        char[] password = &quot;Hello World!&quot;.toCharArray();
        String hash = Hash.password(password).algorithm(Type.BCRYPT).create();
        System.out.println(hash);
        if(Hash.password(password).verify(&quot;bcrypt:13:60:16:n::$2a$13$aIPs6auOGff6bWWRNmfZleD1rzUQq2Owk8tSKeM9T8t2QqW7yTud.&quot;)) {
            // Passwords match. Login successful!
            System.out.println(&quot;success&quot;);
        }
    }
</code></pre>
<p>这是一小段测试代码，然后加密方式不止<code>BCRYPT</code>这种，也是就盐加密，我选的是这种，其实还有很多具体查看官方文档。<br>
<img src="https://towelong.cn/post-images/1571739897849.png" alt=""></p>
]]></content>
    </entry>
</feed>